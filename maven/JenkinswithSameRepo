pipeline{
    agent any
    
    tools {
  maven 'maven3'
  'hudson.plugins.sonar.SonarRunnerInstallation' 'sonarQubeScanner'
}

    stages{
      
        
        stage("Maven version Stage"){
        steps{
        sh 'mvn -version'
        }
        }
        stage("maven clean"){
        steps{
          sh 'mvn -f maven/pom.xml clean package'
        }
        }
        stage("maven package"){
        steps{
          sh 'mvn -f maven/pom.xml clean package'
        }
        }
        stage("maven test"){
        steps{
          sh 'mvn -f maven/pom.xml clean package'
        }
        }
        stage("maven install"){
        steps{
          sh 'mvn -f maven/pom.xml clean package'
        }
        }
        stage("sonajenkins"){
        steps{
           withCredentials([string(credentialsId: 'sonar-jenkins', variable: '')]) {
            sh 'mvn -f maven/pom.xml clean install package sonar:sonar'

        }
        }
        }
        stage("jfrogjenkins"){
        steps{
          rtUpload (
    serverId: 'jfrog_jenk_artifactory',
    spec: '''{
          "files": [
            {
              "pattern": "maven/target/*.jar",
              "target": "libs-snapshot-local/com/devopspract/DevopsMaven/1.0-SNAPSHOT/"
            }
         ]
    }''',
 
)
        }
        }
        stage("publish artifactory to jfrog"){
        steps{
        rtPublishBuildInfo (
    serverId: 'jfrog_jenk_artifactory',
    
)
        }
        }
        stage("terraform init"){
        steps{
            sh 'terraform -chdir=Terraform init '
        }
        }
        stage("terraform plan"){
        steps{
           sh "terraform -chdir=Terraform plan"
        }
        }
         stage("terraform apply"){
        steps{
           sh "terraform -chdir=Terraform apply -auto-approve"
        }
        }
        stage('s3bucket'){
        steps{
           s3Upload consoleLogLevel: 'INFO', dontSetBuildResultOnFailure: false, dontWaitForConcurrentBuildCompletion: false, entries: [[bucket: 'lucius2021', excludedFile: '', flatten: false, gzipFiles: false, keepForever: false, managedArtifacts: false, noUploadOnFailure: false, selectedRegion: 'us-east-1', showDirectlyInBrowser: false, sourceFile: '**/*/*.jar', storageClass: 'STANDARD', uploadFromSlave: false, useServerSideEncryption: false]], pluginFailureResultConstraint: 'FAILURE', profileName: 'jenkins_s3', userMetadata: []
        }
        }
    }
    post{
     failure{
     emailext body: '${currentBuild.currentResult}: Job ${env.JOB_NAME}\nMore Info can be found here: ${env.BUILD_URL}', subject: 'This is from Jenkins failure job jenkins build:${currentBuild.currentResult}: ${env.JOB_NAME}: with build number: ${env.BUILD_NUMBER}', to: 'meforasong@gmail.com, skwandoodi@live.com'
     }
     success{
     emailext body: '${currentBuild.currentResult}: Job ${env.JOB_NAME}\nMore Info can be found here: ${env.BUILD_URL}', subject: 'jenkins build:${currentBuild.currentResult}: ${env.JOB_NAME}: with build number: ${env.BUILD_NUMBER}', to: 'meforasong@gmail.com, skwandoodi@live.com'
     }
     aborted{
     emailext body: '${currentBuild.currentResult}: Job ${env.JOB_NAME}\nMore Info can be found here: ${env.BUILD_URL}', subject: 'jenkins build:${currentBuild.currentResult}: ${env.JOB_NAME}: with build number: ${env.BUILD_NUMBER}', to: 'skwandoodi@gmail.com'
     }
    }
}
